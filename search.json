[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nComming soon…"
  },
  {
    "objectID": "posts/fastai/spider_fly.html",
    "href": "posts/fastai/spider_fly.html",
    "title": "Spider vs House Fly Classifier",
    "section": "",
    "text": "from duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\ndef search_images(term, max_images=200): return L(ddg_images(term, max_results=max_images)).itemgot('image')\n\n\nurls = search_images('spider', max_images=1)\nurls[0]\n\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:60: UserWarning: ddg_images is deprecated. Use DDGS().images() generator\n  warnings.warn(\"ddg_images is deprecated. Use DDGS().images() generator\")\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:64: UserWarning: parameter page is deprecated\n  warnings.warn(\"parameter page is deprecated\")\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:66: UserWarning: parameter max_results is deprecated\n  warnings.warn(\"parameter max_results is deprecated\")\n\n\n'http://upload.wikimedia.org/wikipedia/commons/9/9b/Banana_Spider.jpg'\n\n\n\nfrom fastdownload import download_url\ndest = 'spider.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\n\n\n\ndownload_url(search_images('house fly photos', max_images=1)[0], 'fly.jpg', show_progress=False)\nImage.open('fly.jpg').to_thumb(256,256)\n\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:60: UserWarning: ddg_images is deprecated. Use DDGS().images() generator\n  warnings.warn(\"ddg_images is deprecated. Use DDGS().images() generator\")\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:64: UserWarning: parameter page is deprecated\n  warnings.warn(\"parameter page is deprecated\")\n/usr/local/lib/python3.9/dist-packages/duckduckgo_search/compat.py:66: UserWarning: parameter max_results is deprecated\n  warnings.warn(\"parameter max_results is deprecated\")\n\n\n\n\n\n\nsearches = 'spider','house fly'\npath = Path('spider_or_fly')\nfrom time import sleep\n\n# for o in searches:\n#     dest = (path/o)\n#     dest.mkdir(exist_ok=True, parents=True)\n#     download_images(dest, urls=search_images(f'{o} photo'))\n#     sleep(10)\n#     resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(6)\n\n/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.012352\n0.210427\n0.125000\n00:03\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.439026\n0.211611\n0.156250\n00:01\n\n\n1\n0.283538\n0.130849\n0.031250\n00:01\n\n\n2\n0.210751\n0.062095\n0.031250\n00:01\n\n\n3\n0.156668\n0.024983\n0.000000\n00:01\n\n\n4\n0.122935\n0.011209\n0.000000\n00:01\n\n\n5\n0.100860\n0.008166\n0.000000\n00:01\n\n\n\n\n\n\nis_fly,_,probs = learn.predict(PILImage.create('spider.jpg'))\nprint(f\"This is a: {is_spider}.\")\nprint(f\"Probability it's a fly: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: spider.\nProbability it's a fly: 0.0011\n\n\n\nPILImage.create('fly.jpg').to_thumb(256,256)\n\n\n\n\n\nlearn.export()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Place For Thoughts - just playing around",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nSep 9, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nUse Python to Fill PDF Files!\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2023\n\n\nAndrew Krcatovich\n\n\n\n\n\n\n  \n\n\n\n\nSpider vs House Fly Classifier\n\n\n\n\n\n\n\nfastai\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2023\n\n\nAndrew Krcatovich\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/python-fill-pdf-files.html",
    "href": "posts/python-fill-pdf-files.html",
    "title": "Use Python to Fill PDF Files!",
    "section": "",
    "text": "Use Python to Fill PDF Files!\nPDFs are hard to work with. Over the years I’ve tried several approaches to filling them out in an automated way. It’s amazing my job has so many manual tasks that require filling out PDFs. It’s fairly routine for me to be manually filling out PDF files to process transactions. Needless to say I’ve either created or borrowed several solutions. First let me say I’m no VBA expert but I have experimented with solutions here as well.\nI’ve wrote a VBA script to fill out a PDF using “send keys”. Think “how could I do everything by use of just the keyboard shortcuts?” Once you know how to open a PDF with shortcuts, tab through the form fields and use shortcuts to save, you can automate this in VBA. The problem here is that it’s painstaking to set up. Plus if the form changes or you want to add a new form it’s basically like starting from scratch.\nNext I used VBA and the Acrobat reference to access and manipulate PDFs. This works much better because you can access the PDF form fields using VBA and Java Script. I would highly recommend this route if you’re going to use VBA. I still felt as if every PDF template had to be setup completely separate. Some of this is likely due to my experience level with VBA. Either way there was a lot of copying a pasting code.\nThen came my experience with Python, PyPDF2 and reportlab. I won’t go into too much detail about exactly how I did this. In short you create your PDF template, create blank PDF with just your data fields, and paste the new PDF as a watermark on top of your PDF template. Again, this is painstaking because you’re using grid coordinates to position where text should be placed on the page. This worked, it was fast, but it wasn’t great if the PDF template changed or if you wanted to manipulate the PDF file afterward.\nIt was great when I found you could fill PDF form fields with python using PyPDF2 and pdfrw. Both of these libraries look to be able to do similar tasks but I chose pdfrw because it appears to be maintained better. PyPDF2 actually is no longer maintained. There is a PyPDF3 and PyPDF4; however, I already settled on pdfrw. The only issue I ran into is that you could fill in the fields but those values wouldn’t show until you refreshed the field in Acrobat. I found two ways around this; one was to click into every field and hit Enter. This option isn’t doable if you have several PDFs. The next was to open the PDFs in a web browser which causes a refresh of the fields.\nBecause of these challenges I gave up for a while… However, while digging into Python and PDFs again I found the solution that refreshes the fields!\nSo now I have a working solution I can pass around the office easily. A basic macro reference a Python exe file located on a shared network drive. Meaning there is no python install! And we can populate PDF forms with a simple excel macro while still getting all the flexibility and functionality of Python. The rest of this post will be going through an example of how to fill out a PDF using python.\n\n\nPDF Setup\nI’m using Adobe Acrobat DC. I’m going to create a sample PDF file for this example. If you have an existing PDF you want to use just open, click on Tools &gt; Prepare Form. This action will create a fillable PDF form.\nNow let’s create a simple PDF for this example. We have the following fields.\n\nname\nphone\ndate\naccount_number\ncb_1 (check box “Yes”)\ncb_2 (check box “No”)\n\nNow that we have a sample PDF we will get started with a little Python.\n\n\n\n\n\nimage003.png\n\n\n\n\npdfrw Setup\n\nFirst thing to do is install pdfrw using !pip install pdfrw\n\n\n!pip3 install pdfrw\n\n\nimport pdfrw\npdfrw.__version__\n\n'0.4'\n\n\n\n\nAccessing our PDF\n\n# Let's first set some variable to reference our PDF template and output.pdf\npdf_template = \"template.pdf\"\npdf_output = \"output.pdf\"\n\n\ntemplate_pdf = pdfrw.PdfReader(pdf_template)  # create a pdfrw object from our template.pdf\n# template_pdf  # uncomment to see all the data captured from this PDF.\n\nYou should print out template_pdf to see everything availabe in the PDF. There is a lot so for ease of reading I’ll comment out.\nFor now let’s just try to get the form fields of the PDF we created. To do this we will set some of the variable we find important. I grabbed this code from a random snippet online but you can find several similar setups on stack overflow.\n\nANNOT_KEY = '/Annots'\nANNOT_FIELD_KEY = '/T'\nANNOT_VAL_KEY = '/V'\nANNOT_RECT_KEY = '/Rect'\nSUBTYPE_KEY = '/Subtype'\nWIDGET_SUBTYPE_KEY = '/Widget'\n\nNext, we can loop through the page(s). Here we only have one but you it’s a good idea to prepare for future functionality. We grab all the annotations to grab just the form field keys.\n\nfor page in template_pdf.pages:\n    annotations = page[ANNOT_KEY]\n    for annotation in annotations:\n        if annotation[SUBTYPE_KEY] == WIDGET_SUBTYPE_KEY:\n            if annotation[ANNOT_FIELD_KEY]:\n                key = annotation[ANNOT_FIELD_KEY][1:-1]\n                print(key)\n\nname\nphone\ndate\naccount_number\ncb_1\ncb_2\n\n\nThere you can see we were able to grab our form field names!\n\n\nFilling a PDF\nTo fill a PDF we can create a dictionary of what we want to populate the PDF. The dictionary keys will be the form field names and the values will be what we want to fill into the PDF.\n\nfrom datetime import date\n\ndata_dict = {\n    'name': 'Andrew Krcatovich',\n    'phone': '(123) 123-1234',\n    'date': date.today(),\n    'account_number': '123123123',\n    'cb_1': True,\n    'cb_2': False,\n}\n\nLet’s setup a function to handle grabbing the keys, populating the values, and saving out the output.pdf file\n\ndef fill_pdf(input_pdf_path, output_pdf_path, data_dict):\n    template_pdf = pdfrw.PdfReader(input_pdf_path)\n    for page in template_pdf.pages:\n        annotations = page[ANNOT_KEY]\n        for annotation in annotations:\n            if annotation[SUBTYPE_KEY] == WIDGET_SUBTYPE_KEY:\n                if annotation[ANNOT_FIELD_KEY]:\n                    key = annotation[ANNOT_FIELD_KEY][1:-1]\n                    if key in data_dict.keys():\n                        if type(data_dict[key]) == bool:\n                            if data_dict[key] == True:\n                                annotation.update(pdfrw.PdfDict(\n                                    AS=pdfrw.PdfName('Yes')))\n                        else:\n                            annotation.update(\n                                pdfrw.PdfDict(V='{}'.format(data_dict[key]))\n                            )\n                            annotation.update(pdfrw.PdfDict(AP=''))\n    pdfrw.PdfWriter().write(output_pdf_path, template_pdf)\n\n\nfill_pdf(pdf_template, pdf_output, data_dict)\n\nOkay! That just filled out a PDF. Opening in preview on my Mac shows.\n\n\n\n\nimage004.png\n\n\nHowever, opening the very same PDF in Acrobat doesn’t show the values of the form fields. If you click into the field you can see it did fill but for some reason the field isn’t refreshed to show the value. Printing the PDF here won’t help either as it will print blank. After a long while searching for an answer I found the following solution. Worked like a charm and the form fields are now showing in Acrobat as well.\n\nTip: add Root.AcroForm.update(pdfrw.PdfDict(NeedAppearances=pdfrw.PdfObject(“true”)))\n\nHonestly, I don’t know why this isn’t the default setting. It seems like everyone online runs into the same issue and this solution seems hidden away to where there are several hard work-arounds that are being used. Either way just add the above reference line to the fill_pdf function like so.\n\ndef fill_pdf(input_pdf_path, output_pdf_path, data_dict):\n    template_pdf = pdfrw.PdfReader(input_pdf_path)\n    for page in template_pdf.pages:\n        annotations = page[ANNOT_KEY]\n        for annotation in annotations:\n            if annotation[SUBTYPE_KEY] == WIDGET_SUBTYPE_KEY:\n                if annotation[ANNOT_FIELD_KEY]:\n                    key = annotation[ANNOT_FIELD_KEY][1:-1]\n                    if key in data_dict.keys():\n                        if type(data_dict[key]) == bool:\n                            if data_dict[key] == True:\n                                annotation.update(pdfrw.PdfDict(\n                                    AS=pdfrw.PdfName('Yes')))\n                        else:\n                            annotation.update(\n                                pdfrw.PdfDict(V='{}'.format(data_dict[key]))\n                            )\n                            annotation.update(pdfrw.PdfDict(AP=''))\n    template_pdf.Root.AcroForm.update(pdfrw.PdfDict(NeedAppearances=pdfrw.PdfObject('true')))  # NEW\n    pdfrw.PdfWriter().write(output_pdf_path, template_pdf)\n\nI added one additional function fill_simple_pdf_file as I found it very useful to manipulate a data dictionary, especially if it came from an excel file, first before populating the data. This way you can create many fillable forms from the same data source, do formating on the fields and set default values if nothing was supplied.\n\n\nBringing it all together\n\nimport pdfrw\nfrom datetime import date\n\n\nANNOT_KEY = '/Annots'\nANNOT_FIELD_KEY = '/T'\nANNOT_VAL_KEY = '/V'\nANNOT_RECT_KEY = '/Rect'\nSUBTYPE_KEY = '/Subtype'\nWIDGET_SUBTYPE_KEY = '/Widget'\n\n\ndef fill_pdf(input_pdf_path, output_pdf_path, data_dict):\n    template_pdf = pdfrw.PdfReader(input_pdf_path)\n    for page in template_pdf.pages:\n        annotations = page[ANNOT_KEY]\n        for annotation in annotations:\n            if annotation[SUBTYPE_KEY] == WIDGET_SUBTYPE_KEY:\n                if annotation[ANNOT_FIELD_KEY]:\n                    key = annotation[ANNOT_FIELD_KEY][1:-1]\n                    if key in data_dict.keys():\n                        if type(data_dict[key]) == bool:\n                            if data_dict[key] == True:\n                                annotation.update(pdfrw.PdfDict(\n                                    AS=pdfrw.PdfName('Yes')))\n                        else:\n                            annotation.update(\n                                pdfrw.PdfDict(V='{}'.format(data_dict[key]))\n                            )\n                            annotation.update(pdfrw.PdfDict(AP=''))\n    template_pdf.Root.AcroForm.update(pdfrw.PdfDict(NeedAppearances=pdfrw.PdfObject('true')))\n    pdfrw.PdfWriter().write(output_pdf_path, template_pdf)\n    \n\n# NEW\ndef fill_simple_pdf_file(data, template_input, template_output):\n    some_date = date.today()\n    data_dict = {\n        'name': data.get('name', ''),\n        'phone': data.get('phone', ''),\n        'date': some_date,\n        'account_number': data.get('account_number', ''),\n        'cb_1': data.get('cb_1', False),\n        'cb_2': data.get('cb_2', False),\n    }\n    return fill_pdf(template_input, template_output, data_dict)\n\n\nif __name__ == '__main__':\n    pdf_template = \"template.pdf\"\n    pdf_output = \"output.pdf\"\n    \n    sample_data_dict = {\n        'name': 'Andrew Krcatovich',\n        'phone': '(123) 123-1234',\n#         'date': date.today(),  # Removed date so we can dynamically set in python.\n        'account_number': '123123123',\n        'cb_1': True,\n        'cb_2': False,\n    }\n    fill_simple_pdf_file(sample_data_dict, pdf_template, pdf_output)\n\nThanks for reading! Hope this can help someone else!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]